const x = ['70','70','70','70','70','70','70','70','70','70','70','70','70','70','70','70','70','70','70','70','70','70','70','70','70','70','70','70','70','71','71','71','71','71','71','71','71','71','71','71','71','71','71','71','71','71','71','71','71','71','71','71','71','71','71','71','71','72','72','72','72','72','72','72','72','72','72','72','72','72','72','72','72','72','72','72','72','72','72','72','72','72','72','72','72','73','73','73','73','73','73','73','73','73','73','73','73','73','73','73','73','73','73','73','73','73','73','73','73','73','73','73','73','73','73','73','73','73','73','73','73','73','73','73','73','74','74','74','74','74','74','74','74','74','74','74','74','74','74','74','74','74','74','74','74','74','74','74','74','74','74','74','75','75','75','75','75','75','75','75','75','75','75','75','75','75','75','75','75','75','75','75','75','75','75','75','75','75','75','75','75','75','76','76','76','76','76','76','76','76','76','76','76','76','76','76','76','76','76','76','76','76','76','76','76','76','76','76','76','76','76','76','76','76','76','76','77','77','77','77','77','77','77','77','77','77','77','77','77','77','77','77','77','77','77','77','77','77','77','77','77','77','77','77','78','78','78','78','78','78','78','78','78','78','78','78','78','78','78','78','78','78','78','78','78','78','78','78','78','78','78','78','78','78','78','78','78','78','78','78','79','79','79','79','79','79','79','79','79','79','79','79','79','79','79','79','79','79','79','79','79','79','79','79','79','79','79','79','79','80','80','80','80','80','80','80','80','80','80','80','80','80','80','80','80','80','80','80','80','80','80','80','80','80','80','80','80','80','81','81','81','81','81','81','81','81','81','81','81','81','81','81','81','81','81','81','81','81','81','81','81','81','81','81','81','81','81','82','82','82','82','82','82','82','82','82','82','82','82','82','82','82','82','82','82','82','82','82','82','82','82','82','82','82','82','82','82','82'];
const y = [18.000000,15.000000,18.000000,16.000000,17.000000,15.000000,14.000000,14.000000,14.000000,15.000000,15.000000,14.000000,15.000000,14.000000,24.000000,22.000000,18.000000,21.000000,27.000000,26.000000,25.000000,24.000000,25.000000,26.000000,21.000000,10.000000,10.000000,11.000000,9.000000,27.000000,28.000000,25.000000,25.000000,19.000000,16.000000,17.000000,19.000000,18.000000,14.000000,14.000000,14.000000,14.000000,12.000000,13.000000,13.000000,18.000000,22.000000,19.000000,18.000000,23.000000,28.000000,30.000000,30.000000,31.000000,35.000000,27.000000,26.000000,24.000000,25.000000,23.000000,20.000000,21.000000,13.000000,14.000000,15.000000,14.000000,17.000000,11.000000,13.000000,12.000000,13.000000,19.000000,15.000000,13.000000,13.000000,14.000000,18.000000,22.000000,21.000000,26.000000,22.000000,28.000000,23.000000,28.000000,27.000000,13.000000,14.000000,13.000000,14.000000,15.000000,12.000000,13.000000,13.000000,14.000000,13.000000,12.000000,13.000000,18.000000,16.000000,18.000000,18.000000,23.000000,26.000000,11.000000,12.000000,13.000000,12.000000,18.000000,20.000000,21.000000,22.000000,18.000000,19.000000,21.000000,26.000000,15.000000,16.000000,29.000000,24.000000,20.000000,19.000000,15.000000,24.000000,20.000000,11.000000,20.000000,21.000000,19.000000,15.000000,31.000000,26.000000,32.000000,25.000000,16.000000,16.000000,18.000000,16.000000,13.000000,14.000000,14.000000,14.000000,29.000000,26.000000,26.000000,31.000000,32.000000,28.000000,24.000000,26.000000,24.000000,26.000000,31.000000,19.000000,18.000000,15.000000,15.000000,16.000000,15.000000,16.000000,14.000000,17.000000,16.000000,15.000000,18.000000,21.000000,20.000000,13.000000,29.000000,23.000000,20.000000,23.000000,24.000000,25.000000,24.000000,18.000000,29.000000,19.000000,23.000000,23.000000,22.000000,25.000000,33.000000,28.000000,25.000000,25.000000,26.000000,27.000000,17.500000,16.000000,15.500000,14.500000,22.000000,22.000000,24.000000,22.500000,29.000000,24.500000,29.000000,33.000000,20.000000,18.000000,18.500000,17.500000,29.500000,32.000000,28.000000,26.500000,20.000000,13.000000,19.000000,19.000000,16.500000,16.500000,13.000000,13.000000,13.000000,31.500000,30.000000,36.000000,25.500000,33.500000,17.500000,17.000000,15.500000,15.000000,17.500000,20.500000,19.000000,18.500000,16.000000,15.500000,15.500000,16.000000,29.000000,24.500000,26.000000,25.500000,30.500000,33.500000,30.000000,30.500000,22.000000,21.500000,21.500000,43.100000,36.100000,32.800000,39.400000,36.100000,19.900000,19.400000,20.200000,19.200000,20.500000,20.200000,25.100000,20.500000,19.400000,20.600000,20.800000,18.600000,18.100000,19.200000,17.700000,18.100000,17.500000,30.000000,27.500000,27.200000,30.900000,21.100000,23.200000,23.800000,23.900000,20.300000,17.000000,21.600000,16.200000,31.500000,29.500000,21.500000,19.800000,22.300000,20.200000,20.600000,17.000000,17.600000,16.500000,18.200000,16.900000,15.500000,19.200000,18.500000,31.900000,34.100000,35.700000,27.400000,25.400000,23.000000,27.200000,23.900000,34.200000,34.500000,31.800000,37.300000,28.400000,28.800000,26.800000,33.500000,41.500000,38.100000,32.100000,37.200000,28.000000,26.400000,24.300000,19.100000,34.300000,29.800000,31.300000,37.000000,32.200000,46.600000,27.900000,40.800000,44.300000,43.400000,36.400000,30.000000,44.600000,40.900000,33.800000,29.800000,32.700000,23.700000,35.000000,23.600000,32.400000,27.200000,26.600000,25.800000,23.500000,30.000000,39.100000,39.000000,35.100000,32.300000,37.000000,37.700000,34.100000,34.700000,34.400000,29.900000,33.000000,34.500000,33.700000,32.400000,32.900000,31.600000,28.100000,30.700000,25.400000,24.200000,22.400000,26.600000,20.200000,17.600000,28.000000,27.000000,34.000000,31.000000,29.000000,27.000000,24.000000,23.000000,36.000000,37.000000,31.000000,38.000000,36.000000,36.000000,36.000000,34.000000,38.000000,32.000000,38.000000,25.000000,38.000000,26.000000,22.000000,32.000000,36.000000,27.000000,27.000000,44.000000,32.000000,28.000000,31.000000];
const color=['8','8','8','8','8','8','8','8','8','8','8','8','8','8','4','6','6','6','4','4','4','4','4','4','6','8','8','8','8','4','4','4','4','6','6','6','6','6','8','8','8','8','8','8','8','6','4','6','6','4','4','4','4','4','4','4','4','4','4','4','4','4','8','8','8','8','8','8','8','8','8','3','8','8','8','8','4','4','4','4','4','4','4','4','4','8','8','8','8','8','8','8','8','8','8','8','8','6','6','6','6','6','4','8','8','8','8','6','4','4','4','3','4','6','4','8','8','4','4','4','4','8','4','6','8','6','6','6','6','4','4','4','4','6','6','6','8','8','8','8','8','4','4','4','4','4','4','4','4','4','4','4','6','6','6','6','8','8','8','8','6','6','6','6','6','8','8','4','4','6','4','4','4','4','6','4','6','4','4','4','4','4','4','4','4','4','4','8','8','8','8','6','6','6','6','4','4','4','4','6','6','6','6','4','4','4','4','4','8','4','6','6','8','8','8','8','4','4','4','4','4','8','8','8','8','6','6','6','6','8','8','8','8','4','4','4','4','4','4','4','4','6','4','3','4','4','4','4','4','8','8','8','6','6','6','4','6','6','6','6','6','6','8','6','8','8','4','4','4','4','4','4','4','4','5','6','4','6','4','4','6','6','4','6','6','8','8','8','8','8','8','8','8','4','4','4','4','5','8','4','8','4','4','4','4','4','6','6','4','4','4','4','4','4','4','4','6','4','4','4','4','4','4','4','4','4','4','5','4','4','4','4','4','6','3','4','4','4','4','4','4','6','4','4','4','4','4','4','4','4','4','4','4','4','4','4','4','4','4','4','6','6','6','6','8','6','6','4','4','4','4','4','4','4','4','4','4','4','4','4','4','4','4','4','4','4','6','6','4','6','4','4','4','4','4','4','4','4'];
const data = x.map((d, i) => ({ x: d, y: y[i], color: color[i] }))
    .filter(d => ["4", "6", "8"].includes(d.color));

const width = 560, height = 420;
    const margin = { 
        top: height * 0.1, 
        right: width * 0.05, 
        bottom: height * 0.15, 
        left: width * 0.1 
    };

const svg = d3.select("#github_chart")
    .append("svg")
    .attr("width", width)
    .attr("height", height);

// 添加提示框
const tooltip = d3.select("body")
    .append("div")
    .style("position", "absolute")
    .style("visibility", "hidden")
    .style("background-color", "white")
    .style("border", "1px solid #ccc")
    .style("padding", "5px")
    .style("border-radius", "5px")
    .style("font-size", "12px");

const xScale = d3.scaleLinear()
    .domain([d3.min(data, d => d.x) - (d3.max(data, d => d.x) - d3.min(data, d => d.x)) * 0.05, d3.max(data, d => d.x)])
    .range([margin.left, width - margin.right]);

const yScale = d3.scaleLinear()
    .domain([d3.min(data, d => d.y) - (d3.max(data, d => d.y) - d3.min(data, d => d.y)) * 0.05, d3.max(data, d => d.y)])
    .range([height - margin.bottom, margin.top]);

// 定义颜色比例尺
const colorScale = d3.scaleOrdinal()
    .domain(["4", "6", "8"])
    .range(["#fc4464", "#08bc4d", "#04b0fc"]);

// 计算线性回归和置信区间
function linearRegression(data) {
    const n = data.length;
    const sumX = d3.sum(data, d => d.x);
    const sumY = d3.sum(data, d => d.y);
    const sumXY = d3.sum(data, d => d.x * d.y);
    const sumX2 = d3.sum(data, d => d.x * d.x);
    
    const slope = (n * sumXY - sumX * sumY) / (n * sumX2 - sumX * sumX);
    const intercept = (sumY - slope * sumX) / n;
    
    // 计算标准误差
    const yMean = sumY / n;
    const ssTot = d3.sum(data, d => Math.pow(d.y - yMean, 2));
    const ssRes = d3.sum(data, d => Math.pow(d.y - (slope * d.x + intercept), 2));
    const se = Math.sqrt(ssRes / (n - 2));
    
    // 计算置信区间
    const xMean = sumX / n;
    const tValue = 2.0; // 95% 置信区间
    const xRange = d3.extent(data, d => d.x);
    
    return {
        slope,
        intercept,
        predict: x => slope * x + intercept,
        confidence: x => {
            const xDiff = x - xMean;
            const margin = tValue * se * Math.sqrt(1/n + Math.pow(xDiff, 2) / (n * (sumX2 - n * xMean * xMean)));
            return {
                upper: slope * x + intercept + margin,
                lower: slope * x + intercept - margin
            };
        }
    };
}

// 为每个颜色组绘制回归线和置信区间
["4", "6", "8"].forEach(color => {
    const groupData = data.filter(d => d.color === color);
    if (groupData.length > 0) {
        const regression = linearRegression(groupData);
        const xRange = d3.extent(groupData, d => d.x);
        
        // 绘制置信区间
        const confidenceArea = svg.append("path")
            .datum(d3.range(xRange[0], xRange[1], (xRange[1] - xRange[0]) / 100))
            .attr("fill", colorScale(color))
            .attr("fill-opacity", 0.1)
            .attr("stroke", "none")
            .attr("d", d3.area()
                .x(d => xScale(d))
                .y0(d => yScale(regression.confidence(d).lower))
                .y1(d => yScale(regression.confidence(d).upper))
            );
        
        // 绘制回归线
        const regressionLine = svg.append("path")
            .datum([xRange[0], xRange[1]])
            .attr("fill", "none")
            .attr("stroke", colorScale(color))
            .attr("stroke-width", 2)
            .attr("d", d3.line()
                .x(d => xScale(d))
                .y(d => yScale(regression.predict(d)))
            );
    }
});

// 绘制散点
svg.selectAll("circle")
    .data(data)
    .enter()
    .append("circle")
    .attr("cx", d => xScale(d.x))
    .attr("cy", d => yScale(d.y))
    .attr("r", 4)
    .attr("fill", d => colorScale(d.color))
    .attr("opacity", 0.6)
    .style("cursor", "pointer")
    .on("mouseover", function(event, d) {
        tooltip
            .style("visibility", "visible")
            .html(`x: ${d.x}<br>y: ${d.y}<br>group: ${d.color}`)
            .style("left", (event.pageX + 10) + "px")
            .style("top", (event.pageY - 28) + "px");
        d3.select(this)
            .attr("opacity", 1);
    })
    .on("mouseout", function() {
        tooltip.style("visibility", "hidden");
        d3.select(this)
            .attr("opacity", 0.6);
    });

// 添加x轴
svg.append("g")
    .attr("transform", `translate(0,${height - margin.bottom})`)
    .call(d3.axisBottom(xScale));

// 添加y轴
svg.append("g")
    .attr("transform", `translate(${margin.left},0)`)
    .call(d3.axisLeft(yScale));

// X-axis label
svg.append("text")
    .attr("x", width / 2)
    .attr("y", height - 10)
    .attr("text-anchor", "middle")
    .style("font-size", "14px")
    .text("Model_Year");

// Y-axis label
svg.append("text")
    .attr("transform", "rotate(-90)")
    .attr("x", -height / 2)
    .attr("y", 15)
    .attr("text-anchor", "middle")
    .style("font-size", "14px")
    .text("MPG");

// Plot title
svg.append("text")
    .attr("x", width / 2)
    .attr("y", 20)
    .attr("text-anchor", "middle")
    .style("font-size", "16px")
    .style("font-weight", "bold")
    .text("Cars Plot");
