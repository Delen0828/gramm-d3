function export_d3(g, varargin)
%EXPORT_D3 Export gramm plot to D3.js interactive visualization
%   EXPORT_D3(g, ...) exports the gramm plot g to an interactive D3.js visualization
%   with the following optional parameters:
%       'file_name' - Name of the output files (default: 'untitled')
%       'export_path' - Path where to save the files (default: './')
%       'x' - X-axis label (default: 'x-axis')
%       'y' - Y-axis label (default: 'y-axis')
%       'title' - Plot title (default: 'Untitled')
%       'width' - Width of the plot in pixels (default: figure width)
%       'height' - Height of the plot in pixels (default: figure height)
%
%   Example:
%       g = gramm('x', x, 'y', y);
%       g.geom_line();
%       g.draw();
%       export_d3(g, 'file_name', 'my_plot', 'export_path', './output');
disp(g);
%-----Reuse from export.m-----%
h_fig = g(1).parent;
fig_pos = getpixelposition(h_fig);
% disp(properties(obj.title_axe_handle));
% resolution = get(0, 'ScreenPixelsPerInch')/2.54;
% width_fig = fig_pos(3)/resolution;
% height_fig = fig_pos(4)/resolution;
if fig_pos(3) == 0
    width_fig = '500';
else
    width_fig = num2str(fig_pos(3));
end
if fig_pos(4) == 0
    height_fig = '500';
else
    height_fig = num2str(fig_pos(4));
end

%-----Reuse from export.m-----%

% 直接处理参数
file_name = 'untitled';
export_path = './';
x_label = 'x-axis';
y_label = 'y-axis';
title_text = 'Untitled';
width = width_fig;
height = height_fig;

% 解析输入参数
for i = 1:2:length(varargin)
    switch varargin{i}
        case 'file_name'
            file_name = varargin{i+1};
        case 'export_path'
            export_path = varargin{i+1};
        case 'x'
            x_label = varargin{i+1};
        case 'y'
            y_label = varargin{i+1};
        case 'title'
            title_text = varargin{i+1};
        case 'width'
            width = varargin{i+1};
        case 'height'
            height = varargin{i+1};
    end
end

%-------------END-------------%
x=g.aes.x;
y=g.aes.y;
xAxisName=x_label;
yAxisName=y_label;
plotTitle=title_text;



% 检查是否有颜色分组
hasColorGroup = false;
if isfield(g.results, 'color') && ~isempty(g.results.color) && length(g.results.color) > 1
    hasColorGroup = true;
    colorData = g.aes.color;
else
    colorData = repmat('#ff4565', length(x), 1);
end

% 分别处理数值型和非数值型数据
if isnumeric(x) && isnumeric(y)
    % 对于数值型数据，移除NaN值
    validIndices = ~isnan(x) & ~isnan(y);
    x = x(validIndices);
    y = y(validIndices);
    if hasColorGroup
        colorData = colorData(validIndices);
    end
else
    % 对于非数值型数据，转换为字符串并保持原始数据
    if ~isnumeric(x)
        x = string(x);
    end
    if ~isnumeric(y)
        y = string(y);
    end
    % 对于非数值型数据，仍然需要处理NaN值
    validIndices = ~ismissing(x) & ~ismissing(y);
    x = x(validIndices);
    y = y(validIndices);
    if hasColorGroup
        colorData = colorData(validIndices);
    end
end

% Convert x and y to JavaScript array format
xStr = sprintf('[%s]', strjoin(arrayfun(@(x) sprintf('''%s''', x), string(x), 'UniformOutput', false), ','));
yStr = sprintf('[%s]', strjoin(arrayfun(@(y) sprintf('%.6f', y), y, 'UniformOutput', false), ','));

% cStr = []; % Placeholder for color data to prevent error in Scatter plot
if hasColorGroup
    cStr = sprintf('[%s]', strjoin(arrayfun(@(x) sprintf('''%s''', x), string(colorData), 'UniformOutput', false), ','));
else
    % 创建一个与 x 长度相同的颜色数组，所有元素都是 '#ff4565'
    cStr = sprintf('[%s]', strjoin(repmat({'''#ff4565'''}, 1, length(x)), ','));
end

% 确定图表类型
isLineChart = false;
isBarChart = false;
isJitterChart = false;
isScatterChart = false;
disp('g.results:');
disp(g.results);
% 检查是否有geom_line_handle
if isfield(g.results, 'geom_line_handle')
    isLineChart = true;
end

% 检查是否有geom_bar_handle
if isfield(g.results, 'geom_bar_handle') 
    isBarChart = true;
end

% 检查是否有geom_jitter_handle
if isfield(g.results, 'geom_jitter_handle')
    isJitterChart = true;
end

% 检查是否有geom_point_handle
if isfield(g.results, 'geom_point_handle')
    isScatterChart = true;
end

%TODO: error detection here
% 如果没有检测到任何图表类型，默认为线图
if ~isLineChart && ~isBarChart && ~isJitterChart && ~isScatterChart
    isLineChart = true;
	disp('No chart type detected, defaulting to line chart');
end

% 准备颜色相关的字符串
if hasColorGroup
    % 定义颜色映射
    % colorMap = containers.Map({'4', '6', '8'}, {'#fc4464', '#08bc4d', '#04b0fc'});
    colorDomainStr = '["4", "6", "8"]';
    colorFillStr = 'colorScale(d.color)';
    tooltipColorStr = '<br>group: ${d.color}';
else
    colorDomainStr = '[]';
    colorFillStr = '"#ff4565"';
    tooltipColorStr = '';
end

% 根据图表类型生成不同的D3.js代码
if isLineChart
    % 线图D3.js代码
    d3Script = sprintf([ ...
        'const x = %s;\n', ...
        'const y = %s;\n', ...
        'const data = x.map((d, i) => ({ x: d, y: y[i] }));\n', ...
        '\n', ...
        'const width = %s, height = %s;\n', ...
        '    const margin = { \n', ...
        '        top: height * 0.1, \n', ...  
        '        right: width * 0.05, \n', ... 
        '        bottom: height * 0.15, \n', ... 
        '        left: width * 0.1 \n', ... 
        '    };\n', ...
        '\n', ...
        'const svg = d3.select("#%s_chart")\n', ...
        '    .append("svg")\n', ...
        '    .attr("width", width)\n', ...
        '    .attr("height", height);\n', ...
        '\n', ...
        '// Add tooltip\n', ...
        'const tooltip = d3.select("body")\n', ...
        '    .append("div")\n', ...
        '    .style("position", "absolute")\n', ...
        '    .style("visibility", "hidden")\n', ...
        '    .style("background-color", "white")\n', ...
        '    .style("border", "1px solid #ccc")\n', ...
        '    .style("padding", "5px")\n', ...
        '    .style("border-radius", "5px")\n', ...
        '    .style("font-size", "12px");\n', ...
        '\n', ...
        'const xScale = d3.scaleLinear()\n', ...
        '    .domain([d3.min(data, d => d.x) - (d3.max(data, d => d.x) - d3.min(data, d => d.x)) * 0.05, d3.max(data, d => d.x)])\n', ...
        '    .range([margin.left, width - margin.right]);\n', ...
        '\n', ...
        'const yScale = d3.scaleLinear()\n', ...
        '    .domain([d3.min(data, d => d.y), d3.max(data, d => d.y)])\n', ...
        '    .range([height - margin.bottom, margin.top]);\n', ...
        '\n', ...
        'const line = d3.line()\n', ...
        '    .x(d => xScale(d.x))\n', ...
        '    .y(d => yScale(d.y));\n', ...
        '\n', ...
        '// Draw line\n', ...
        'svg.append("path")\n', ...
        '    .datum(data)\n', ...
        '    .attr("fill", "none")\n', ...
        '    .attr("stroke", "#ff4565")\n', ...
        '    .attr("stroke-width", 2)\n', ...
        '    .attr("d", line);\n', ...
        '\n', ...
        '// Add invisible hover area\n', ...
        'const hoverArea = svg.append("rect")\n', ...
        '    .attr("width", width)\n', ...
        '    .attr("height", height)\n', ...
        '    .attr("fill", "transparent")\n', ...
        '    .style("cursor", "crosshair");\n', ...
        '\n', ...
        '// Add hover point\n', ...
        'const hoverDot = svg.append("circle")\n', ...
        '    .attr("r", 4)\n', ...
        '    .attr("fill", "#808080")\n', ...
        '    .style("visibility", "hidden");\n', ...
        '\n', ...
        '// Add hover event\n', ...
        'hoverArea.on("mousemove", function(event) {\n', ...
        '    const mouseX = d3.pointer(event)[0];\n', ...
        '    const mouseY = d3.pointer(event)[1];\n', ...
        '    \n', ...
        '    // Find the nearest data point\n', ...
        '    const xValue = xScale.invert(mouseX);\n', ...
        '    const closestPoint = data.reduce((prev, curr) => {\n', ...
        '        return (Math.abs(curr.x - xValue) < Math.abs(prev.x - xValue) ? curr : prev);\n', ...
        '    });\n', ...
        '    \n', ...
        '    // Update tooltip and point position\n', ...
        '    tooltip\n', ...
        '        .style("visibility", "visible")\n', ...
        '        .html(`x: ${closestPoint.x}<br>y: ${closestPoint.y}`)\n', ...
        '        .style("left", (event.pageX + 10) + "px")\n', ...
        '        .style("top", (event.pageY - 28) + "px");\n', ...
        '    \n', ...
        '    hoverDot\n', ...
        '        .attr("cx", xScale(closestPoint.x))\n', ...
        '        .attr("cy", yScale(closestPoint.y))\n', ...
        '        .style("visibility", "visible");\n', ...
        '})\n', ...
        '.on("mouseout", function() {\n', ...
        '    tooltip.style("visibility", "hidden");\n', ...
        '    hoverDot.style("visibility", "hidden");\n', ...
        '});\n', ...
        '\n', ...
        'svg.append("g")\n', ...
        '    .attr("transform", `translate(0,${height - margin.bottom})`)\n', ...
        '    .call(d3.axisBottom(xScale));\n', ...
        '\n', ...
        'svg.append("g")\n', ...
        '    .attr("transform", `translate(${margin.left},0)`)\n', ...
        '    .call(d3.axisLeft(yScale));\n' ...
        '// X-axis label\n', ...
        'svg.append("text")\n', ...
        '    .attr("x", width / 2)\n', ...
        '    .attr("y", height - 10)\n', ...
        '    .attr("text-anchor", "middle")\n', ...
        '    .style("font-size", "14px")\n', ...
        '    .text("%s");\n', ...
        '\n', ...
        '// Y-axis label\n', ...
        'svg.append("text")\n', ...
        '    .attr("transform", "rotate(-90)")\n', ...
        '    .attr("x", -height / 2)\n', ...
        '    .attr("y", 15)\n', ...
        '    .attr("text-anchor", "middle")\n', ...
        '    .style("font-size", "14px")\n', ...
        '    .text("%s");\n', ...
        '\n', ...
        '// Plot title\n', ...
        'svg.append("text")\n', ...
        '    .attr("x", width / 2)\n', ...
        '    .attr("y", 20)\n', ...
        '    .attr("text-anchor", "middle")\n', ...
        '    .style("font-size", "16px")\n', ...
        '    .style("font-weight", "bold")\n', ...
        '    .text("%s");\n' ...
    ], xStr, yStr, width, height,file_name, xAxisName, yAxisName, plotTitle);
elseif isBarChart
    % 条形图D3.js代码
    d3Script = sprintf([ ...
        'const x = %s;\n', ...
        'const y = %s;\n', ...
        'const data = x.map((d, i) => ({ x: d, y: y[i] }));\n', ...
        '\n', ...
        'const width = %s, height = %s;\n', ...
        '    const margin = { \n', ...
        '        top: height * 0.1, \n', ...  
        '        right: width * 0.05, \n', ... 
        '        bottom: height * 0.15, \n', ... 
        '        left: width * 0.1 \n', ... 
        '    };\n', ...
        '\n', ...
        'const svg = d3.select("#%s_chart")\n', ...
        '    .append("svg")\n', ...
        '    .attr("width", width)\n', ...
        '    .attr("height", height);\n', ...
        '\n', ...
        '// Determine x-axis type\n', ...
        'const xIsNumeric = data.every(d => !isNaN(d.x));\n', ...
        'let xScale;\n', ...
        'if (xIsNumeric) {\n', ...
        '    xScale = d3.scaleLinear()\n', ...
        '        .domain([d3.min(data, d => d.x) - (d3.max(data, d => d.x) - d3.min(data, d => d.x)) * 0.05, d3.max(data, d => d.x)])\n', ...
        '        .range([margin.left, width - margin.right]);\n', ...
        '} else {\n', ...
        '    xScale = d3.scaleBand()\n', ...
        '        .domain(data.map(d => d.x))\n', ...
        '        .range([margin.left, width - margin.right])\n', ...
        '        .padding(0.1);\n', ...
        '}\n', ...
        '\n', ...
        'const yScale = d3.scaleLinear()\n', ...
        '    .domain([0, d3.max(data, d => d.y)])\n', ...
        '    .range([height - margin.bottom, margin.top]);\n', ...
        '\n', ...
        '// Draw bars\n', ...
        'svg.selectAll("rect")\n', ...
        '    .data(data)\n', ...
        '    .enter()\n', ...
        '    .append("rect")\n', ...
        '    .attr("x", d => xIsNumeric ? xScale(d.x) - 10 : xScale(d.x))\n', ...
        '    .attr("y", d => yScale(d.y))\n', ...
        '    .attr("width", xIsNumeric ? 20 : xScale.bandwidth())\n', ...
        '    .attr("height", d => height - margin.bottom - yScale(d.y))\n', ...
        '    .attr("fill", "#ff4565");\n', ...
        '\n', ...
        '// Add x-axis\n', ...
        'if (xIsNumeric) {\n', ...
        '    svg.append("g")\n', ...
        '        .attr("transform", `translate(0,${height - margin.bottom})`)\n', ...
        '        .call(d3.axisBottom(xScale));\n', ...
        '} else {\n', ...
        '    svg.append("g")\n', ...
        '        .attr("transform", `translate(0,${height - margin.bottom})`)\n', ...
        '        .call(d3.axisBottom(xScale))\n', ...
        '        .selectAll("text")\n', ...
        '        .attr("transform", "rotate(-45)")\n', ...
        '        .style("text-anchor", "end");\n', ...
        '}\n', ...
        '\n', ...
        '// Add y-axis\n', ...
        'svg.append("g")\n', ...
        '    .attr("transform", `translate(${margin.left},0)`)\n', ...
        '    .call(d3.axisLeft(yScale));\n', ...
        '\n', ...
        '// X-axis label\n', ...
        'svg.append("text")\n', ...
        '    .attr("x", width / 2)\n', ...
        '    .attr("y", height - 10)\n', ...
        '    .attr("text-anchor", "middle")\n', ...
        '    .style("font-size", "14px")\n', ...
        '    .text("%s");\n', ...
        '\n', ...
        '// Y-axis label\n', ...
        'svg.append("text")\n', ...
        '    .attr("transform", "rotate(-90)")\n', ...
        '    .attr("x", -height / 2)\n', ...
        '    .attr("y", 15)\n', ...
        '    .attr("text-anchor", "middle")\n', ...
        '    .style("font-size", "14px")\n', ...
        '    .text("%s");\n', ...
        '\n', ...
        '// Plot title\n', ...
        'svg.append("text")\n', ...
        '    .attr("x", width / 2)\n', ...
        '    .attr("y", 20)\n', ...
        '    .attr("text-anchor", "middle")\n', ...
        '    .style("font-size", "16px")\n', ...
        '    .style("font-weight", "bold")\n', ...
        '    .text("%s");\n' ...
    ], xStr, yStr, width, height,file_name, xAxisName, yAxisName, plotTitle);
elseif isJitterChart
    % 抖动图D3.js代码
	d3Script = sprintf([ ...
			'const x = %s;\n', ...
			'const y = %s;\n', ...
			'const data = x.map((d, i) => ({ x: d, y: y[i] }));\n', ...
			'\n', ...
			'const width = %s, height = %s;\n', ...
			'    const margin = { \n', ...
			'        top: height * 0.1, \n', ...  
			'        right: width * 0.05, \n', ... 
			'        bottom: height * 0.15, \n', ... 
			'        left: width * 0.1 \n', ... 
			'    };\n', ...
			'\n', ...
			'const svg = d3.select("#%s_chart")\n', ...
			'    .append("svg")\n', ...
			'    .attr("width", width)\n', ...
			'    .attr("height", height);\n', ...
			'\n', ...
			'// Add tooltip\n', ...
			'const tooltip = d3.select("body")\n', ...
			'    .append("div")\n', ...
			'    .style("position", "absolute")\n', ...
			'    .style("visibility", "hidden")\n', ...
			'    .style("background-color", "white")\n', ...
			'    .style("border", "1px solid #ccc")\n', ...
			'    .style("padding", "5px")\n', ...
			'    .style("border-radius", "5px")\n', ...
			'    .style("font-size", "12px");\n', ...
			'\n', ...
			'// Determine x-axis type\n', ...
			'const xIsNumeric = data.every(d => !isNaN(d.x));\n', ...
			'let xScale;\n', ...
			'if (xIsNumeric) {\n', ...
			'    xScale = d3.scaleLinear()\n', ...
			'        .domain([d3.min(data, d => d.x) - (d3.max(data, d => d.x) - d3.min(data, d => d.x)) * 0.05, d3.max(data, d => d.x)])\n', ...
			'        .range([margin.left, width - margin.right]);\n', ...
			'} else {\n', ...
			'    xScale = d3.scaleBand()\n', ...
			'        .domain(data.map(d => d.x))\n', ...
			'        .range([margin.left, width - margin.right])\n', ...
			'        .padding(0.1);\n', ...
			'}\n', ...
			'\n', ...
			'const yScale = d3.scaleLinear()\n', ...
			'    .domain(d3.extent(data, d => d.y))\n', ...
			'    .range([height - margin.bottom, margin.top]);\n', ...
			'\n', ...
			'// Add jitter effect\n', ...
			'const jitterWidth = xIsNumeric ? 20 : xScale.bandwidth() * 0.3;\n', ...
			'const jitterHeight = (yScale.domain()[1] - yScale.domain()[0]) * 0.02;\n', ...
			'\n', ...
			'// Draw jitter points\n', ...
			'svg.selectAll("circle")\n', ...
			'    .data(data)\n', ...
			'    .enter()\n', ...
			'    .append("circle")\n', ...
			'    .attr("cx", d => {\n', ...
			'        const baseX = xIsNumeric ? xScale(d.x) : xScale(d.x) + xScale.bandwidth()/2;\n', ...
			'        return baseX + (Math.random() - 0.5) * jitterWidth;\n', ...
			'    })\n', ...
			'    .attr("cy", d => yScale(d.y) + (Math.random() - 0.5) * jitterHeight)\n', ...
			'    .attr("r", 4)\n', ...
			'    .attr("fill", "#ff4565")\n', ...
			'    .attr("opacity", 0.6)\n', ...
			'    .style("cursor", "pointer")\n', ...
			'    .on("mouseover", function(event, d) {\n', ...
			'        tooltip\n', ...
			'            .style("visibility", "visible")\n', ...
			'            .html(`x: ${d.x}<br>y: ${d.y}`)\n', ...
			'            .style("left", (event.pageX + 10) + "px")\n', ...
			'            .style("top", (event.pageY - 28) + "px");\n', ...
			'        d3.select(this)\n', ...
			'            .attr("fill", "#808080")\n', ...
			'            .attr("opacity", 1);\n', ...
			'    })\n', ...
			'    .on("mouseout", function() {\n', ...
			'        tooltip.style("visibility", "hidden");\n', ...
			'        d3.select(this)\n', ...
			'            .attr("fill", "#ff4565")\n', ...
			'            .attr("opacity", 0.6);\n', ...
			'    });\n', ...
			'\n', ...
			'// Add invisible detection area\n', ...
			'svg.selectAll("circle")\n', ...
			'    .data(data)\n', ...
			'    .enter()\n', ...
			'    .append("circle")\n', ...
			'    .attr("cx", d => {\n', ...
			'        const baseX = xIsNumeric ? xScale(d.x) : xScale(d.x) + xScale.bandwidth()/2;\n', ...
			'        return baseX + (Math.random() - 0.5) * jitterWidth;\n', ...
			'    })\n', ...
			'    .attr("cy", d => yScale(d.y) + (Math.random() - 0.5) * jitterHeight)\n', ...
			'    .attr("r", 20)\n', ...
			'    .attr("fill", "transparent")\n', ...
			'    .style("cursor", "pointer")\n', ...
			'    .on("mouseover", function(event, d) {\n', ...
			'        tooltip\n', ...
			'            .style("visibility", "visible")\n', ...
			'            .html(`x: ${d.x}<br>y: ${d.y}`)\n', ...
			'            .style("left", (event.pageX + 10) + "px")\n', ...
			'            .style("top", (event.pageY - 28) + "px");\n', ...
			'        // Find corresponding visible point and change its color\n', ...
			'        svg.selectAll("circle")\n', ...
			'            .filter(function() {\n', ...
			'                return d3.select(this).attr("fill") === "#ff4565";\n', ...
			'            })\n', ...
			'            .filter(function() {\n', ...
			'                const cx = d3.select(this).attr("cx");\n', ...
			'                const cy = d3.select(this).attr("cy");\n', ...
			'                return Math.abs(cx - d3.select(this.parentNode).select("circle[fill=transparent]").attr("cx")) < 0.1 &&\n', ...
			'                       Math.abs(cy - d3.select(this.parentNode).select("circle[fill=transparent]").attr("cy")) < 0.1;\n', ...
			'            })\n', ...
			'            .attr("fill", "#808080")\n', ...
			'            .attr("opacity", 1);\n', ...
			'    })\n', ...
			'    .on("mouseout", function() {\n', ...
			'        tooltip.style("visibility", "hidden");\n', ...
			'        // Restore all visible points color\n', ...
			'        svg.selectAll("circle")\n', ...
			'            .filter(function() {\n', ...
			'                return d3.select(this).attr("fill") === "#808080";\n', ...
			'            })\n', ...
			'            .attr("fill", "#ff4565")\n', ...
			'            .attr("opacity", 0.6);\n', ...
			'    });\n', ...
			'\n', ...
			'// Add x-axis\n', ...
			'if (xIsNumeric) {\n', ...
			'    svg.append("g")\n', ...
			'        .attr("transform", `translate(0,${height - margin.bottom})`)\n', ...
			'        .call(d3.axisBottom(xScale));\n', ...
			'} else {\n', ...
			'    svg.append("g")\n', ...
			'        .attr("transform", `translate(0,${height - margin.bottom})`)\n', ...
			'        .call(d3.axisBottom(xScale))\n', ...
			'        .selectAll("text")\n', ...
			'        .attr("transform", "rotate(-45)")\n', ...
			'        .style("text-anchor", "end");\n', ...
			'}\n', ...
			'\n', ...
			'// Add y-axis\n', ...
			'svg.append("g")\n', ...
			'    .attr("transform", `translate(${margin.left},0)`)\n', ...
			'    .call(d3.axisLeft(yScale));\n', ...
			'\n', ...
			'// X-axis label\n', ...
			'svg.append("text")\n', ...
			'    .attr("x", width / 2)\n', ...
			'    .attr("y", height - 10)\n', ...
			'    .attr("text-anchor", "middle")\n', ...
			'    .style("font-size", "14px")\n', ...
			'    .text("%s");\n', ...
			'\n', ...
			'// Y-axis label\n', ...
			'svg.append("text")\n', ...
			'    .attr("transform", "rotate(-90)")\n', ...
			'    .attr("x", -height / 2)\n', ...
			'    .attr("y", 15)\n', ...
			'    .attr("text-anchor", "middle")\n', ...
			'    .style("font-size", "14px")\n', ...
			'    .text("%s");\n', ...
			'\n', ...
			'// Plot title\n', ...
			'svg.append("text")\n', ...
			'    .attr("x", width / 2)\n', ...
			'    .attr("y", 20)\n', ...
			'    .attr("text-anchor", "middle")\n', ...
			'    .style("font-size", "16px")\n', ...
			'    .style("font-weight", "bold")\n', ...
			'    .text("%s");\n' ...
    	], xStr, yStr, width, height,file_name, xAxisName, yAxisName, plotTitle);
	
elseif isScatterChart
	if isnumeric(x)
    % 散点图D3.js代码 - 数值型x轴
    % for i = 1:length(x)
    %     disp(['Index: ' num2str(i) ', x: ' num2str(x(i)) ', y: ' num2str(y(i)) ', color: ' num2str(colorData(i))]);
    % end
		d3Script = sprintf([ ...
			'const x = %s;\n', ...
			'const y = %s;\n', ...
			'const color=%s;\n', ...
			'const data = x.map((d, i) => ({ x: d, y: y[i], color: color[i] }))\n', ...
			'    .filter(d => ["4", "6", "8"].includes(d.color));\n', ...
			'\n', ...
			'const width = %s, height = %s;\n', ...
			'    const margin = { \n', ...
			'        top: height * 0.1, \n', ...  
			'        right: width * 0.05, \n', ... 
			'        bottom: height * 0.15, \n', ... 
			'        left: width * 0.1 \n', ... 
			'    };\n', ...
			'\n', ...
			'const svg = d3.select("#%s_chart")\n', ...
			'    .append("svg")\n', ...
			'    .attr("width", width)\n', ...
			'    .attr("height", height);\n', ...
			'\n', ...
			'// Add tooltip\n', ...
			'const tooltip = d3.select("body")\n', ...
			'    .append("div")\n', ...
			'    .style("position", "absolute")\n', ...
			'    .style("visibility", "hidden")\n', ...
			'    .style("background-color", "white")\n', ...
			'    .style("border", "1px solid #ccc")\n', ...
			'    .style("padding", "5px")\n', ...
			'    .style("border-radius", "5px")\n', ...
			'    .style("font-size", "12px");\n', ...
			'\n', ...
			'const xScale = d3.scaleLinear()\n', ...
			'    .domain([d3.min(data, d => d.x) - (d3.max(data, d => d.x) - d3.min(data, d => d.x)) * 0.05, d3.max(data, d => d.x)])\n', ...
			'    .range([margin.left, width - margin.right]);\n', ...
			'\n', ...
			'const yScale = d3.scaleLinear()\n', ...
			'    .domain([d3.min(data, d => d.y) - (d3.max(data, d => d.y) - d3.min(data, d => d.y)) * 0.05, d3.max(data, d => d.y)])\n', ...
			'    .range([height - margin.bottom, margin.top]);\n', ...
			'\n', ...
			'// Define color scale\n', ...
			'const colorScale = d3.scaleOrdinal()\n', ...
			'    .domain(%s)\n', ...
			'    .range(["#fc4464", "#08bc4d", "#04b0fc"]);\n', ...
			'\n', ...
			'// Calculate linear regression and confidence interval\n', ...
			'function linearRegression(data) {\n', ...
			'    const n = data.length;\n', ...
			'    const sumX = d3.sum(data, d => d.x);\n', ...
			'    const sumY = d3.sum(data, d => d.y);\n', ...
			'    const sumXY = d3.sum(data, d => d.x * d.y);\n', ...
			'    const sumX2 = d3.sum(data, d => d.x * d.x);\n', ...
			'    \n', ...
			'    const slope = (n * sumXY - sumX * sumY) / (n * sumX2 - sumX * sumX);\n', ...
			'    const intercept = (sumY - slope * sumX) / n;\n', ...
			'    \n', ...
			'    // Calculate standard error\n', ...
			'    const yMean = sumY / n;\n', ...
			'    const ssTot = d3.sum(data, d => Math.pow(d.y - yMean, 2));\n', ...
			'    const ssRes = d3.sum(data, d => Math.pow(d.y - (slope * d.x + intercept), 2));\n', ...
			'    const se = Math.sqrt(ssRes / (n - 2));\n', ...
			'    \n', ...
			'    // Calculate confidence interval\n', ...
			'    const xMean = sumX / n;\n', ...
			'    const tValue = 2.0; // 95%% confidence interval\n', ...
			'    const xRange = d3.extent(data, d => d.x);\n', ...
			'    \n', ...
			'    return {\n', ...
			'        slope,\n', ...
			'        intercept,\n', ...
			'        predict: x => slope * x + intercept,\n', ...
			'        confidence: x => {\n', ...
			'            const xDiff = x - xMean;\n', ...
			'            const margin = tValue * se * Math.sqrt(1/n + Math.pow(xDiff, 2) / (n * (sumX2 - n * xMean * xMean)));\n', ...
			'            return {\n', ...
			'                upper: slope * x + intercept + margin,\n', ...
			'                lower: slope * x + intercept - margin\n', ...
			'            };\n', ...
			'        }\n', ...
			'    };\n', ...
			'}\n', ...
			'\n', ...
			'// Draw regression line and confidence interval for each color group\n', ...
			'["4", "6", "8"].forEach(color => {\n', ...
			'    const groupData = data.filter(d => d.color === color);\n', ...
			'    if (groupData.length > 0) {\n', ...
			'        const regression = linearRegression(groupData);\n', ...
			'        const xRange = d3.extent(groupData, d => d.x);\n', ...
			'        \n', ...
			'        // Draw confidence interval\n', ...
			'        const confidenceArea = svg.append("path")\n', ...
			'            .datum(d3.range(xRange[0], xRange[1], (xRange[1] - xRange[0]) / 100))\n', ...
			'            .attr("fill", colorScale(color))\n', ...
			'            .attr("fill-opacity", 0.1)\n', ...
			'            .attr("stroke", "none")\n', ...
			'            .attr("d", d3.area()\n', ...
			'                .x(d => xScale(d))\n', ...
			'                .y0(d => yScale(regression.confidence(d).lower))\n', ...
			'                .y1(d => yScale(regression.confidence(d).upper))\n', ...
			'            );\n', ...
			'        \n', ...
			'        // Draw regression line\n', ...
			'        const regressionLine = svg.append("path")\n', ...
			'            .datum([xRange[0], xRange[1]])\n', ...
			'            .attr("fill", "none")\n', ...
			'            .attr("stroke", colorScale(color))\n', ...
			'            .attr("stroke-width", 2)\n', ...
			'            .attr("d", d3.line()\n', ...
			'                .x(d => xScale(d))\n', ...
			'                .y(d => yScale(regression.predict(d)))\n', ...
			'            );\n', ...
			'    }\n', ...
			'});\n', ...
			'\n', ...
			'// Draw scatter points\n', ...
			'svg.selectAll("circle")\n', ...
			'    .data(data)\n', ...
			'    .enter()\n', ...
			'    .append("circle")\n', ...
			'    .attr("cx", d => xScale(d.x))\n', ...
			'    .attr("cy", d => yScale(d.y))\n', ...
			'    .attr("r", 4)\n', ...
			'    .attr("fill", d => %s)\n', ...
			'    .attr("opacity", 0.6)\n', ...
			'    .style("cursor", "pointer")\n', ...
			'    .on("mouseover", function(event, d) {\n', ...
			'        tooltip\n', ...
			'            .style("visibility", "visible")\n', ...
			'            .html(`x: ${d.x}<br>y: ${d.y}%s`)\n', ...
			'            .style("left", (event.pageX + 10) + "px")\n', ...
			'            .style("top", (event.pageY - 28) + "px");\n', ...
			'        d3.select(this)\n', ...
			'            .attr("opacity", 1);\n', ...
			'    })\n', ...
			'    .on("mouseout", function() {\n', ...
			'        tooltip.style("visibility", "hidden");\n', ...
			'        d3.select(this)\n', ...
			'            .attr("opacity", 0.6);\n', ...
			'    });\n', ...
			'\n', ...
			'// Add x-axis\n', ...
			'svg.append("g")\n', ...
			'    .attr("transform", `translate(0,${height - margin.bottom})`)\n', ...
			'    .call(d3.axisBottom(xScale));\n', ...
			'\n', ...
			'// Add y-axis\n', ...
			'svg.append("g")\n', ...
			'    .attr("transform", `translate(${margin.left},0)`)\n', ...
			'    .call(d3.axisLeft(yScale));\n', ...
			'\n', ...
			'// X-axis label\n', ...
			'svg.append("text")\n', ...
			'    .attr("x", width / 2)\n', ...
			'    .attr("y", height - 10)\n', ...
			'    .attr("text-anchor", "middle")\n', ...
			'    .style("font-size", "14px")\n', ...
			'    .text("%s");\n', ...
			'\n', ...
			'// Y-axis label\n', ...
			'svg.append("text")\n', ...
			'    .attr("transform", "rotate(-90)")\n', ...
			'    .attr("x", -height / 2)\n', ...
			'    .attr("y", 15)\n', ...
			'    .attr("text-anchor", "middle")\n', ...
			'    .style("font-size", "14px")\n', ...
			'    .text("%s");\n', ...
			'\n', ...
			'// Plot title\n', ...
			'svg.append("text")\n', ...
			'    .attr("x", width / 2)\n', ...
			'    .attr("y", 20)\n', ...
			'    .attr("text-anchor", "middle")\n', ...
			'    .style("font-size", "16px")\n', ...
			'    .style("font-weight", "bold")\n', ...
			'    .text("%s");\n' ...
		], xStr, yStr, cStr, width, height,file_name, colorDomainStr, colorFillStr, tooltipColorStr, xAxisName, yAxisName, plotTitle);
	else
		% 散点图D3.js代码 - 分类型x轴
		d3Script = sprintf([ ...
			'const x = %s;\n', ...
			'const y = %s;\n', ...
			'const color=%s;\n', ...
			'const data = x.map((d, i) => ({ x: d, y: y[i], color: color[i] }))\n', ...
			'const width = %s, height = %s;\n', ...
			'    const margin = { \n', ...
			'        top: height * 0.1, \n', ...  
			'        right: width * 0.05, \n', ... 
			'        bottom: height * 0.15, \n', ... 
			'        left: width * 0.1 \n', ... 
			'    };\n', ...
			'\n', ...
			'const svg = d3.select("#%s_chart")\n', ...
			'    .append("svg")\n', ...
			'    .attr("width", width)\n', ...
			'    .attr("height", height);\n', ...
			'\n', ...
			'// Add tooltip\n', ...
			'const tooltip = d3.select("body")\n', ...
			'    .append("div")\n', ...
			'    .style("position", "absolute")\n', ...
			'    .style("visibility", "hidden")\n', ...
			'    .style("background-color", "white")\n', ...
			'    .style("border", "1px solid #ccc")\n', ...
			'    .style("padding", "5px")\n', ...
			'    .style("border-radius", "5px")\n', ...
			'    .style("font-size", "12px");\n', ...
			'\n', ...
			'const xScale = d3.scaleBand()\n', ...
			'    .domain(data.map(d => d.x))\n', ...
			'    .range([margin.left, width - margin.right])\n', ...
			'    .padding(0.1);\n', ...
			'\n', ...
			'const yScale = d3.scaleLinear()\n', ...
			'    .domain([d3.min(data, d => d.y) - (d3.max(data, d => d.y) - d3.min(data, d => d.y)) * 0.05, d3.max(data, d => d.y)])\n', ...
			'    .range([height - margin.bottom, margin.top]);\n', ...
			'\n', ...
			'// Define color scale\n', ...
			'const colorScale = d3.scaleOrdinal()\n', ...
			'    .domain(%s)\n', ...
			'    .range(["#fc4464", "#08bc4d", "#04b0fc"]);\n', ...
			'\n', ...
			'// Draw scatter points\n', ...
			'svg.selectAll("circle")\n', ...
			'    .data(data)\n', ...
			'    .enter()\n', ...
			'    .append("circle")\n', ...
			'    .attr("cx", d => xScale(d.x) + xScale.bandwidth()/2)\n', ...
			'    .attr("cy", d => yScale(d.y))\n', ...
			'    .attr("r", 4)\n', ...
			'    .attr("fill", d => %s)\n', ...
			'    .attr("opacity", 0.6)\n', ...
			'    .style("cursor", "pointer")\n', ...
			'    .on("mouseover", function(event, d) {\n', ...
			'        tooltip\n', ...
			'            .style("visibility", "visible")\n', ...
			'            .html(`x: ${d.x}<br>y: ${d.y}%s`)\n', ...
			'            .style("left", (event.pageX + 10) + "px")\n', ...
			'            .style("top", (event.pageY - 28) + "px");\n', ...
			'        d3.select(this)\n', ...
			'            .attr("opacity", 1);\n', ...
			'    })\n', ...
			'    .on("mouseout", function() {\n', ...
			'        tooltip.style("visibility", "hidden");\n', ...
			'        d3.select(this)\n', ...
			'            .attr("opacity", 0.6);\n', ...
			'    });\n', ...
			'\n', ...
			'// Add x-axis\n', ...
			'svg.append("g")\n', ...
			'    .attr("transform", `translate(0,${height - margin.bottom})`)\n', ...
			'    .call(d3.axisBottom(xScale))\n', ...
			'    .selectAll("text")\n', ...
			'    .attr("transform", "rotate(-45)")\n', ...
			'    .style("text-anchor", "end");\n', ...
			'\n', ...
			'// Add y-axis\n', ...
			'svg.append("g")\n', ...
			'    .attr("transform", `translate(${margin.left},0)`)\n', ...
			'    .call(d3.axisLeft(yScale));\n', ...
			'\n', ...
			'// X-axis label\n', ...
			'svg.append("text")\n', ...
			'    .attr("x", width / 2)\n', ...
			'    .attr("y", height - 10)\n', ...
			'    .attr("text-anchor", "middle")\n', ...
			'    .style("font-size", "14px")\n', ...
			'    .text("%s");\n', ...
			'\n', ...
			'// Y-axis label\n', ...
			'svg.append("text")\n', ...
			'    .attr("transform", "rotate(-90)")\n', ...
			'    .attr("x", -height / 2)\n', ...
			'    .attr("y", 15)\n', ...
			'    .attr("text-anchor", "middle")\n', ...
			'    .style("font-size", "14px")\n', ...
			'    .text("%s");\n', ...
			'\n', ...
			'// Plot title\n', ...
			'svg.append("text")\n', ...
			'    .attr("x", width / 2)\n', ...
			'    .attr("y", 20)\n', ...
			'    .attr("text-anchor", "middle")\n', ...
			'    .style("font-size", "16px")\n', ...
			'    .style("font-weight", "bold")\n', ...
			'    .text("%s");\n' ...
		], xStr, yStr, cStr, width, height,file_name, colorDomainStr, colorFillStr, tooltipColorStr, xAxisName, yAxisName, plotTitle);
	end
end

% Create export directory if it doesn't exist
if ~isempty(export_path) && ~exist(export_path, 'dir')
    mkdir(export_path);
end

% Write JavaScript to file
jsFile = fullfile(export_path, sprintf('%s.js', file_name));
fileID = fopen(jsFile, 'w+');
fprintf(fileID, '%s', d3Script);
fclose(fileID);

% Get the relative path for the JS file in the HTML
jsRelativePath = sprintf('%s.js', file_name);
% if ~isempty(export_path)
%     % If export_path is not empty, we need to adjust the path in the HTML
%     % Remove trailing slash if present
%     if export_path(end) == '/' || export_path(end) == '\'
%         export_path = export_path(1:end-1);
%     end
%     % Get just the directory name without the full path
%     [~, dirName] = fileparts(export_path);
%     if ~isempty(dirName)
%         jsRelativePath = fullfile(dirName, jsRelativePath);
%     end
% end

% Define the HTML file content
htmlContent = sprintf([ ...
    '<!DOCTYPE html>\n', ...
    '<html lang="en">\n', ...
    '<head>\n', ...
    '    <meta charset="UTF-8">\n', ...
    '    <meta name="viewport" content="width=device-width, initial-scale=1.0">\n', ...
    '    <title>D3.js Chart</title>\n', ...
    '    <script src="https://d3js.org/d3.v7.min.js"></script>\n', ...
    '</head>\n', ...
    '<body>\n', ...
    '    <div id="%s_chart"></div>\n', ...
    '    <script src="%s"></script>\n', ...
    '</body>\n', ...
    '</html>\n' ...
], file_name, jsRelativePath);

% Write HTML to file
htmlFile = fullfile(export_path, sprintf('%s.html', file_name));
fileID = fopen(htmlFile, 'w+');
fprintf(fileID, '%s', htmlContent);
fclose(fileID);

fprintf('D3.js code successfully written to %s\n', jsFile);
fprintf('HTML file successfully written to %s\n', htmlFile);
end