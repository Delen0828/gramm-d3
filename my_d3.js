const x = [0,0.10101,0.20202,0.30303,0.40404,0.50505,0.60606,0.70707,0.80808,0.90909,1.0101,1.1111,1.2121,1.3131,1.4141,1.5152,1.6162,1.7172,1.8182,1.9192,2.0202,2.1212,2.2222,2.3232,2.4242,2.5253,2.6263,2.7273,2.8283,2.9293,3.0303,3.1313,3.2323,3.3333,3.4343,3.5354,3.6364,3.7374,3.8384,3.9394,4.0404,4.1414,4.2424,4.3434,4.4444,4.5455,4.6465,4.7475,4.8485,4.9495,5.0505,5.1515,5.2525,5.3535,5.4545,5.5556,5.6566,5.7576,5.8586,5.9596,6.0606,6.1616,6.2626,6.3636,6.4646,6.5657,6.6667,6.7677,6.8687,6.9697,7.0707,7.1717,7.2727,7.3737,7.4747,7.5758,7.6768,7.7778,7.8788,7.9798,8.0808,8.1818,8.2828,8.3838,8.4848,8.5859,8.6869,8.7879,8.8889,8.9899,9.0909,9.1919,9.2929,9.3939,9.4949,9.596,9.697,9.798,9.899,10];
const y = [0,0.10084,0.20065,0.29841,0.39314,0.48385,0.56963,0.64961,0.72296,0.78895,0.84689,0.89619,0.93636,0.96699,0.98775,0.99845,0.99897,0.98931,0.96956,0.93992,0.90071,0.85231,0.79522,0.73003,0.65739,0.57805,0.49282,0.40257,0.30821,0.21071,0.11106,0.010279,-0.090606,-0.19057,-0.28859,-0.38366,-0.47483,-0.56116,-0.64176,-0.71582,-0.78259,-0.84137,-0.89158,-0.9327,-0.96432,-0.9861,-0.99783,-0.99938,-0.99075,-0.97202,-0.94338,-0.90512,-0.85764,-0.80141,-0.73701,-0.6651,-0.58641,-0.50174,-0.41196,-0.31797,-0.22075,-0.12127,-0.020558,0.080364,0.18047,0.27873,0.37415,0.46576,0.55262,0.63384,0.70861,0.77615,0.83577,0.88688,0.92895,0.96154,0.98434,0.9971,0.99969,0.9921,0.97438,0.94674,0.90945,0.86288,0.80752,0.74392,0.67274,0.59471,0.51061,0.4213,0.3277,0.23076,0.13147,0.030834,-0.070114,-0.17035,-0.26884,-0.3646,-0.45664,-0.54402];
const data = x.map((d, i) => ({ x: d, y: y[i] }));

const width = 800, height = 600;
    const margin = { 
        top: height * 0.1, 
        right: width * 0.05, 
        bottom: height * 0.15, 
        left: width * 0.1 
    };

const svg = d3.select("#chart")
    .append("svg")
    .attr("width", width)
    .attr("height", height);

const xScale = d3.scaleLinear()
    .domain(d3.extent(data, d => d.x))
    .range([margin.left, width - margin.right]);

const yScale = d3.scaleLinear()
    .domain([0, d3.max(data, d => d.y)])
    .range([height - margin.bottom, margin.top]);

const line = d3.line()
    .x(d => xScale(d.x))
    .y(d => yScale(d.y));

svg.append("path")
    .datum(data)
    .attr("fill", "none")
    .attr("stroke", "steelblue")
    .attr("stroke-width", 2)
    .attr("d", line);

svg.append("g")
    .attr("transform", `translate(0,${height - margin.bottom})`)
    .call(d3.axisBottom(xScale));

svg.append("g")
    .attr("transform", `translate(${margin.left},0)`)
    .call(d3.axisLeft(yScale));
// X-axis label
svg.append("text")
    .attr("x", width / 2)
    .attr("y", height - 10)
    .attr("text-anchor", "middle")
    .style("font-size", "14px")
    .text("X-Axis");

// Y-axis label
svg.append("text")
    .attr("transform", "rotate(-90)")
    .attr("x", -height / 2)
    .attr("y", 15)
    .attr("text-anchor", "middle")
    .style("font-size", "14px")
    .text("Y-Axis");

// Plot title
svg.append("text")
    .attr("x", width / 2)
    .attr("y", 20)
    .attr("text-anchor", "middle")
    .style("font-size", "16px")
    .style("font-weight", "bold")
    .text("Plot of sin(x)");
